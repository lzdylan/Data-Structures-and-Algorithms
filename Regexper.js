/**
 * Created by war3_2 on 2017/3/2.
 */
//字面量写法
let reg = /\bis\b/;
// 对象写法
let reg = new RegExp(is)


/*
\t  水平制表符
\v  垂直制表符
\n  换行符
\r  回车符
\0  空字符
\f  换页符
\cx 与X对应的控制字符（Ctrl+X）
元字符：. * + ? $ ^ | \ () {} []
---------------------------------------------------------------------------------------------------------
 g:global全文搜索，不添加，搜索到第一个匹配的位置
 i:ignore case 忽略大小写，默认大小写敏感
 m:multiple lines 多行搜索
[]  构建一个简单的类    例如：[abc]把字符a或b或c归为一类
^   反向类/负向类     例如：[^abc]   注：反向符号在括号内
-   范围类     例如：[a-zA-Z] a到z
----------------------------------------------------------------------------------------------------------
预定义类：
.   除了回车和换行之外的所有字符
\d  数字字符
\D  非数字字符
\s  空白符
\S  非空白符
\w  单词字符（字母、数字、下划线）
\W  非单词字符
 ----------------------------------------------------------------------------------------------------------
 边界匹配字符：    注：在类字符外面
 ^  以xxx开始
 $  以xxx结束
 \b  单词边界
 \B 非单词边界
 ----------------------------------------------------------------------------------------------------------
 量词：
 ?  出现0次或1次（最多出现1次）
 +  出现1次或多次（最少出现1次）
 *  出现0次或多次（任意次）
 {n} 出现n次
 {n,m}  出现n到m次
 {n,}  至少出现n次
 ----------------------------------------------------------------------------------------------------------
 贪婪匹配：（尽量多的匹配）  例如："12345678".replace(/\d{3,5}/g,"x")   result:x78
 非贪婪匹配：（尽量少的匹配,量词后面加?号）  例如："12345678".replace(/\d{3,5}?/g,"x")   result:xx78
 ----------------------------------------------------------------------------------------------------------
 分组：()
 错——例如：/Dylan{3}/  result:Dylannn
 对——例如：/(Dylan){3}/  result:DylanDylanDylan
 ----------------------------------------------------------------------------------------------------------
 或：|
 例如：/Dylan|Allen/   result:Dylan或者Allen
 ----------------------------------------------------------------------------------------------------------
 反向引用[捕获，如果不想捕获在分组内加上?:就可以  例如：（?:Dylan）(ok)会忽略掉Dylan分组]：
 正常写法——例如："2017-03-02".replace(/\d{4}-\d{2}-\d{2}/g,"03/02/2017")
 反向引用——例如："2017-03-02".replace(/(\d{4})-(\d{2})-(\d{2})/g,'$2/$3/$1')
 ----------------------------------------------------------------------------------------------------------
 前瞻：
 正则表达式是从文本头部向尾部开始解析的，文本尾部方向，称为前，文本后部叫做后，前瞻就是向前检查是否符合断言
 正向前瞻：exp(?=assert)     例如：'a2*3'.replace(/\w(?=\d)/g,"god")
 负向前瞻：exp(?!assert)     例如：'a2*3'.replace(/\w(?!\d)/g,"god")
 ----------------------------------------------------------------------------------------------------------
*/
